
const float power_averaging_hamming_window[SENSORS_BUFFER_SIZE] = {0.0008970621215519176,0.0009008015027111707,0.0009120142244437358,0.0009306840293750497,0.0009567838480728112,0.0009902758382950771,0.0010311114398578898,0.001079231445042907,0.0011345660844429264,0.0011970351281208637,0.001266548001935486,0.0013430039188652575,0.0014262920251398884,0.0015162915609677012,0.001612872035625788,0.0017158934166590794,0.001825206332914018,0.001940652291112452,0.002062063905651739,0.0021892651412978607,0.0023220715684196896,0.0024602906303943157,0.0026037219227957524,0.002752157483962186,0.002905382096520503,0.003063173599430914,0.0032253032100992146,0.003391535856089679,0.003561630515957623,0.0037353405687074433,0.003912414151369502,0.004092594524177343,0.004275620442815806,0.004461226537200315,0.004649143696238137,0.004839099458013719,0.005030818404832442,0.005224022562549928,0.005418431803607989,0.0056137642531927994,0.005809736697926424,0.006006064996499156,0.006202464491647235,0.006398650422878669,0.006594338339348741,0.006789244512286512,0.006983086346374443,0.007175582789484566,0.007366454740177215,0.007555425452371424,0.007742220936600291,0.00792657035726951,0.008108206425343089,0.008286865785886902,0.008462289399908162,0.008634222919937205,0.008802417058806997,0.008966627951095693,0.009126617506708193,0.00928215375608401,0.00943301118653096,0.009578971069197017,0.009719821776206209,0.009855359087498837,0.009985386486931022,0.010109715447204331,0.010228165703212333,0.010340565513407772,0.010446751908811395,0.010546570929301386,0.010639877846840826,0.010726537375319513,0.010806423866705888,0.010879421493224663,0.010945424415296027,0.011004336934992923,0.011056073634793877,0.01110055950143026,0.011137730034648338,0.011167531340728485,0.011189920210625912,0.011204864182619673,0.011212341589379029,0.011212341589379029,0.011204864182619673,0.011189920210625912,0.011167531340728485,0.011137730034648338,0.01110055950143026,0.011056073634793877,0.011004336934992923,0.010945424415296027,0.010879421493224663,0.010806423866705888,0.010726537375319513,0.010639877846840826,0.010546570929301386,0.010446751908811395,0.010340565513407772,0.010228165703212333,0.010109715447204331,0.009985386486931022,0.009855359087498837,0.009719821776206209,0.009578971069197017,0.00943301118653096,0.00928215375608401,0.009126617506708193,0.008966627951095693,0.008802417058806997,0.008634222919937205,0.008462289399908162,0.008286865785886902,0.008108206425343089,0.00792657035726951,0.007742220936600291,0.007555425452371424,0.007366454740177215,0.007175582789484566,0.006983086346374443,0.006789244512286512,0.006594338339348741,0.006398650422878669,0.006202464491647235,0.006006064996499156,0.005809736697926424,0.0056137642531927994,0.005418431803607989,0.005224022562549928,0.005030818404832442,0.004839099458013719,0.004649143696238137,0.004461226537200315,0.004275620442815806,0.004092594524177343,0.003912414151369502,0.0037353405687074433,0.003561630515957623,0.003391535856089679,0.0032253032100992146,0.003063173599430914,0.002905382096520503,0.002752157483962186,0.0026037219227957524,0.0024602906303943157,0.0023220715684196896,0.0021892651412978607,0.002062063905651739,0.001940652291112452,0.001825206332914018,0.0017158934166590794,0.001612872035625788,0.0015162915609677012,0.0014262920251398884,0.0013430039188652575,0.001266548001935486,0.0011970351281208637,0.0011345660844429264,0.001079231445042907,0.0010311114398578898,0.0009902758382950771,0.0009567838480728112,0.0009306840293750497,0.0009120142244437358,0.0009008015027111707,0.0008970621215519176};


unsigned long last_call_time_micros = 0;
void reset_power_calculations(power_state_t *power)
{
  last_call_time_micros = micros();
  power->power_watts_raw = 0;
  power->power_watts_smoothed = 0;
  power->revolutions_float = 0;
  power->revolutions_long = 0;
  power->last_timestamp = 0;
}

bool calculate_power(sensor_state_t sensors, power_state_t *power)
{
  bool has_new_smoothed_value = false;

  unsigned long current_call_time_micros = micros();

  unsigned long elapsed_micros = current_call_time_micros - last_call_time_micros;

  float gyro_rad_per_s = -(sensors.gyro.gyro.y - calibration.gyro_offset);

  power->power_watts_raw = - 2.0 * CRANK_LENGTH_MM * gyro_rad_per_s * sensors.force_newtons / 1000.0;
  power->power_watts_buffer[power->power_buffer_index % SENSORS_BUFFER_SIZE] = power->power_watts_raw;
  power->power_buffer_index++;

  if(power->power_buffer_index % SENSOR_UPDATES_PER_GATT == 0) {
    has_new_smoothed_value = true;
    float average = 0;
    for(int i=0;i<SENSORS_BUFFER_SIZE;i++) {
      average += power->power_watts_buffer[(power->power_buffer_index + i) % SENSORS_BUFFER_SIZE] * power_averaging_hamming_window[i];
    }
    power->power_watts_smoothed = average;
  }
  
  power->revolutions_float += gyro_rad_per_s * ((float)elapsed_micros) / (2*PI*1000000.0);
  // Serial.print("Rev: "); Serial.println(power->revolutions_float);

  long new_revolutions_long = (long)power->revolutions_float;
  if((new_revolutions_long+power->revolutions_long) % 2 == 1) {
    power->last_timestamp = millis(); //todo: interpolate this for better accuracy
  }
  power->revolutions_long = new_revolutions_long;

  last_call_time_micros = current_call_time_micros;

  if(false) {  
    // Serial.print(sensors.gyro.gyro.x); Serial.print("\t");
    // Serial.print(sensors.gyro.gyro.y);Serial.print("\t");
    // Serial.print(sensors.gyro.gyro.z);Serial.print("\t");
    // Serial.print(sensors.force_newtons);Serial.print("\t");
    Serial.print(power->revolutions_float);Serial.print("\t");
    Serial.print(power->revolutions_long);Serial.print("\t");
    Serial.print(power->last_timestamp);Serial.print("\t");
    Serial.print(power->power_watts_raw);Serial.print("\t");
    Serial.println();
  }
  

  return has_new_smoothed_value;
}